"use client"

import { useState, useEffect, useRef } from "react"
import { useChatSystemV2 } from "@/hooks/use-chat-system-v2"
import { useTheme } from "@/contexts/theme-context"
import { generateMockResumeCode } from "@/lib/utils/mockCodeGenerator"
import { useAuthCheck, usePendingAuthAction } from "@/hooks/use-auth-check"
import { AuthPromptDialog } from "@/components/dialogs"
import { useToast } from "@/hooks/use-toast"

// ÂØºÂÖ•Êñ∞ÁöÑÁªÑ‰ª∂
import { ChatHeader } from "@/components/chat/ChatHeader"
import { ChatSidebar } from "@/components/chat/ChatSidebar"
import { WelcomeScreen } from "@/components/chat/WelcomeScreen"
import { ChatModeView } from "@/components/chat/ChatModeView"
import { CodeModeView } from "@/components/chat/CodeModeView"

export default function ChatPage() {
  const { theme } = useTheme()
  const { toast } = useToast()
  
  // ËÆ§ËØÅÁä∂ÊÄÅ
  const { isAuthenticated, isLoading: authLoading, userId } = useAuthCheck()
  const { executePendingAction } = usePendingAuthAction()
  const [showAuthDialog, setShowAuthDialog] = useState(false)
  const [pendingMessage, setPendingMessage] = useState<string>('')
  
  const {
    sessions = [],
    currentSession,
    isGenerating,
    createNewSession,
    selectSession,
    sendMessage,
  } = useChatSystemV2()
  
  const [inputValue, setInputValue] = useState("")
  const [hasStartedChat, setHasStartedChat] = useState(false)
  const [isCodeMode, setIsCodeMode] = useState(false)
  const [generatedCode, setGeneratedCode] = useState<any[]>([])
  const [isSidebarCollapsed, setIsSidebarCollapsed] = useState(false)
  const [chatMode, setChatMode] = useState<'normal' | 'professional'>('normal')
  const inputRef = useRef<HTMLInputElement>(null)

  // ÁõëÂê¨ÂΩìÂâç‰ºöËØùÂèòÂåñÔºåÂ¶ÇÊûúÊúâ‰ºöËØù‰∏îÊúâÊ∂àÊÅØÔºåÂàôÊòæÁ§∫ÂØπËØùÊ®°Âºè
  useEffect(() => {
    if (currentSession && currentSession.conversationHistory && currentSession.conversationHistory.length > 0) {
      setHasStartedChat(true)
    }
  }, [currentSession])

  // ÁõëÂê¨ÂΩìÂâç‰ºöËØùÂèòÂåñÔºåÊ£ÄÊü•ÊòØÂê¶ËøõÂÖ•‰ª£Á†ÅÁîüÊàêÈò∂ÊÆµ
  useEffect(() => {
    if (currentSession && currentSession.conversationHistory && currentSession.conversationHistory.length > 0) {
      setHasStartedChat(true)
      
          // Ê£ÄÊü•ÊòØÂê¶Êúâ‰ª£Á†ÅÁîüÊàêÁõ∏ÂÖ≥ÁöÑÊ∂àÊÅØ
    const hasCodeGeneration = currentSession.conversationHistory.some(message => 
      message.metadata?.systemState?.current_stage === '‰ª£Á†ÅÁîüÊàê‰∏≠' ||
      message.metadata?.codeBlocks ||
      // üîß Ê£ÄÊü•Áõ¥Êé•‰ª£Á†ÅÁîüÊàêÊ®°Âºè
      message.metadata?.directCodeGeneration ||
      message.metadata?.projectGenerated ||
      message.metadata?.projectFiles ||
      // üîß Ê£ÄÊü•‰∏çÂêåÁöÑintentÁä∂ÊÄÅ
      message.metadata?.intent === 'project_complete'
    )
      
      if (hasCodeGeneration) {
        // üîß ‰øÆÂ§çÔºöÊó†ËÆ∫ÊòØÂê¶Â∑≤Âú®‰ª£Á†ÅÊ®°ÂºèÔºåÈÉΩË¶ÅÊ£ÄÊü•ÂíåÊõ¥Êñ∞‰ª£Á†Å
        if (!isCodeMode) {
          setIsCodeMode(true)
        }
        
        // ÊèêÂèñÁîüÊàêÁöÑ‰ª£Á†Å - ÊîØÊåÅÂ§öÁßçÊï∞ÊçÆÊ∫ê
        let extractedCode: any[] = []
        
        // 1. ‰ºòÂÖàÊ£ÄÊü•ÊúÄÊñ∞ÁöÑÈ°πÁõÆÊñá‰ª∂ÔºàÊµãËØïÊ®°ÂºèÔºâ
        const projectMessages = currentSession.conversationHistory.filter(msg => 
          msg.metadata?.projectFiles && Array.isArray(msg.metadata.projectFiles)
        )
        
                 if (projectMessages.length > 0) {
           const latestProjectMessage = projectMessages[projectMessages.length - 1]
           extractedCode = latestProjectMessage.metadata?.projectFiles || []
           console.log('üéØ [‰ª£Á†ÅÊèêÂèñ] ‰ªéprojectFilesÊèêÂèñÂà∞', extractedCode.length, '‰∏™Êñá‰ª∂')
         } else {
           // 2. ÂõûÈÄÄÂà∞‰º†ÁªüÁöÑcodeBlocks
           const codeMessages = currentSession.conversationHistory.filter(msg => msg.metadata?.codeBlocks)
           if (codeMessages.length > 0) {
             const latestCodeMessage = codeMessages[codeMessages.length - 1]
             extractedCode = latestCodeMessage.metadata?.codeBlocks || []
             console.log('üéØ [‰ª£Á†ÅÊèêÂèñ] ‰ªécodeBlocksÊèêÂèñÂà∞', extractedCode.length, '‰∏™Êñá‰ª∂')
           }
         }
        
        // üîß ‰øÆÂ§çÔºöÂè™ÊúâÂΩìÊèêÂèñÂà∞ÁöÑ‰ª£Á†Å‰∏éÂΩìÂâç‰ª£Á†Å‰∏çÂêåÊó∂ÊâçÊõ¥Êñ∞
        if (extractedCode.length > 0 && extractedCode.length !== generatedCode.length) {
          setGeneratedCode(extractedCode)
          console.log('‚úÖ [‰ª£Á†ÅËÆæÁΩÆ] ÊàêÂäüËÆæÁΩÆÁîüÊàêÁöÑ‰ª£Á†ÅÔºåÂÖ±', extractedCode.length, '‰∏™Êñá‰ª∂')
        } else if (extractedCode.length === 0) {
          console.log('‚ö†Ô∏è [‰ª£Á†ÅÊèêÂèñ] Êú™ÊâæÂà∞‰ªª‰Ωï‰ª£Á†ÅÊñá‰ª∂')
        }
      }
    }
  }, [currentSession, isCodeMode, generatedCode.length])

  // Â§ÑÁêÜÁôªÂΩïÊàêÂäüÂêéÁöÑÁªßÁª≠Êìç‰Ωú
  useEffect(() => {
    if (isAuthenticated && !authLoading) {
      // Ê£ÄÊü•ÊòØÂê¶ÊúâÂæÖÊâßË°åÁöÑÊìç‰Ωú
      const executed = executePendingAction(() => {
        // ÁôªÂΩïÊàêÂäüÂêéÁªßÁª≠ÂèëÈÄÅÊ∂àÊÅØ
        if (pendingMessage) {
          setTimeout(() => {
            sendMessage(pendingMessage)
            setPendingMessage('')
            setHasStartedChat(true)
          }, 500)
        }
      })
      
      if (executed) {
        console.log('‚úÖ ÁôªÂΩïÊàêÂäüÔºåÁªßÁª≠ÊâßË°åËÅäÂ§©Êìç‰Ωú')
      }
    }
  }, [isAuthenticated, authLoading, pendingMessage, executePendingAction, sendMessage])

  // ÁõëÂê¨ÈîÆÁõòÂø´Êç∑ÈîÆ
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Ctrl/Cmd + B ÂàáÊç¢‰æßËæπÊ†è
      if ((e.ctrlKey || e.metaKey) && e.key === 'b') {
        e.preventDefault()
        setIsSidebarCollapsed(!isSidebarCollapsed)
      }
    }

    window.addEventListener('keydown', handleKeyDown)
    return () => window.removeEventListener('keydown', handleKeyDown)
  }, [isSidebarCollapsed])

  // ÂèëÈÄÅÊ∂àÊÅØ
  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    // Ê£ÄÊü•ËÆ§ËØÅÁä∂ÊÄÅ
    if (!authLoading && !isAuthenticated) {
      // Êú™ÁôªÂΩïÔºåÊòæÁ§∫ÁôªÂΩïÊèêÁ§∫
      setPendingMessage(inputValue)
      setShowAuthDialog(true)
      return
    }

    // üîß ‰øÆÂ§çÔºöÁ´ãÂç≥ËÆæÁΩÆ‰∏∫Â∑≤ÂºÄÂßãËÅäÂ§©Áä∂ÊÄÅÔºåÁ°Æ‰øùÁïåÈù¢Á´ãÂç≥ÂàáÊç¢
    if (!hasStartedChat) {
      setHasStartedChat(true)
    }

    // üîß Ê£ÄÊü•ÊòØÂê¶Âú®‰∏ì‰∏öÊ®°ÂºèÊµãËØï
    const isInExpertMode = isCodeMode && currentSession?.conversationHistory?.some(msg => 
      msg.metadata?.expertMode && msg.metadata?.awaitingUserInput
    )

    // Ê†πÊçÆÊ®°ÂºèÈÄâÊã©‰∏çÂêåÁöÑÂ§ÑÁêÜÊñπÂºè
    let messageToSend = inputValue
    let sendOptions: any = {}

    if (isInExpertMode) {
      // üéØ ‰∏ì‰∏öÊ®°ÂºèÊµãËØïÔºöÊ∑ªÂä†‰∏ì‰∏öÊ®°ÂºèÊ†áËØÜÂíåÂº∫Âà∂‰ΩøÁî®coding agent
      messageToSend = `[FORCE_AGENT:coding][TEST_MODE]${inputValue}`
      sendOptions = {
        forceAgent: 'coding',
        expertMode: true
      }
      console.log('üéØ [‰∏ì‰∏öÊ®°ÂºèÊµãËØïÂèëÈÄÅ] Ê∂àÊÅØ:', messageToSend)
    } else if (chatMode === 'professional') {
      // ‰∏ì‰∏öÊ®°ÂºèÔºöËá™Âä®ËøõÂÖ•‰ª£Á†ÅÊ®°ÂºèÔºå‰ΩøÁî®‰∏ì‰∏öÊ®°Âºè prompt
      messageToSend = `[FORCE_AGENT:coding][TEST_MODE]${inputValue}`
      sendOptions = {
        forceAgent: 'coding',
        expertMode: true
      }
      // Ëá™Âä®ÂàáÊç¢Âà∞‰ª£Á†ÅÊ®°Âºè
      if (!isCodeMode) {
        setIsCodeMode(true)
        setGeneratedCode([])
      }
      console.log('üéØ [‰∏ì‰∏öÊ®°ÂºèÂèëÈÄÅ] Ê∂àÊÅØ:', messageToSend)
    } else {
      // ÊôÆÈÄöÊ®°ÂºèÔºöÁõ¥Êé•‰ΩøÁî®Áî®Êà∑ËæìÂÖ•ÔºåÊ∑ªÂä†Ê®°ÂºèÊ†áËØÜ
      messageToSend = `[ÊôÆÈÄöÊ®°Âºè] ${inputValue}`
    }

    // üîß ‰øÆÂ§çÔºöÂÖàÂèëÈÄÅÊ∂àÊÅØÔºåËÆ©Áî®Êà∑Ê∂àÊÅØÁ´ãÂç≥ÊòæÁ§∫Ôºå‰ºöËØùÂàõÂª∫Âú® sendMessage ÂÜÖÈÉ®Â§ÑÁêÜ
    sendMessage(messageToSend, sendOptions)
    setInputValue("")
  }

  // Â§ÑÁêÜÈîÆÁõò‰∫ã‰ª∂
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  // ÂºÄÂßãÊñ∞ÂØπËØù
  const handleNewChat = async () => {
    setHasStartedChat(false)
    setInputValue("")
    setIsCodeMode(false)
    setGeneratedCode([])
    await createNewSession()
  }

  // Â§ÑÁêÜ‰ª£Á†Å‰∏ãËΩΩ
  const handleCodeDownload = () => {
    const projectData = {
      name: currentSession?.id || 'HeysMeÈ°πÁõÆ',
      files: generatedCode
    }
    console.log('‰∏ãËΩΩÈ°πÁõÆ:', projectData)
  }

  // Â§ÑÁêÜÈÉ®ÁΩ≤
  const handleDeploy = () => {
    console.log('ÈÉ®ÁΩ≤È°πÁõÆ')
  }

  // Â§ÑÁêÜ‰ª£Á†ÅÁºñËæë
  const handleEditCode = (filename: string) => {
    console.log('ÁºñËæëÊñá‰ª∂:', filename)
  }

  // Â§ÑÁêÜÊñá‰ª∂‰∏ä‰º†
  const handleFileUpload = async (file: File) => {
    // Ëøô‰∏™ÂáΩÊï∞Áé∞Âú®‰∏ªË¶ÅÁî®‰∫éÈ™åËØÅÔºåÂÆûÈôÖÂ§ÑÁêÜÂú® WelcomeScreen ‰∏≠ËøõË°å
    const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain', 'text/markdown', 'application/json'];
    const maxSize = 10 * 1024 * 1024; // 10MB
    
    if (!allowedTypes.includes(file.type)) {
      toast({
        title: "Êñá‰ª∂Á±ªÂûã‰∏çÊîØÊåÅ",
        description: "ËØ∑‰∏ä‰º† PDF„ÄÅWord„ÄÅÊñáÊú¨Êàñ Markdown Êñá‰ª∂",
        variant: "destructive",
      });
      return;
    }
    
    if (file.size > maxSize) {
      toast({
        title: "Êñá‰ª∂ËøáÂ§ß",
        description: "Êñá‰ª∂Â§ßÂ∞è‰∏çËÉΩË∂ÖËøá 10MB",
        variant: "destructive",
      });
      return;
    }
  };

  // Â§ÑÁêÜÂ∏¶Êñá‰ª∂ÁöÑÊ∂àÊÅØÂèëÈÄÅ
  const handleSendWithFiles = async (message: string, files: any[]) => {
    try {
      // Ê£ÄÊü•ËÆ§ËØÅÁä∂ÊÄÅ
      if (!authLoading && !isAuthenticated) {
        setPendingMessage(message);
        setShowAuthDialog(true);
        return;
      }

      if (!hasStartedChat) {
        setHasStartedChat(true);
      }

      // ÊûÑÂª∫ÂåÖÂê´Êñá‰ª∂‰ø°ÊÅØÁöÑÊ∂àÊÅØ
      let fullMessage = message;
      
      if (files.length > 0) {
        const fileInfos = files.map(fileWithPreview => {
          const file = fileWithPreview.file;
          return `üìé ${file.name}
Á±ªÂûã: ${file.type}
Â§ßÂ∞è: ${(file.size / 1024).toFixed(1)}KB
${fileWithPreview.parsedContent ? `ÂÜÖÂÆπ: ${fileWithPreview.parsedContent}` : ''}`;
        }).join('\n\n');

        fullMessage = `${message}\n\n${fileInfos}`;
      }

      // ÂèëÈÄÅÊ∂àÊÅØ
      sendMessage(fullMessage);
      setInputValue("");

      // ÊòæÁ§∫ÊàêÂäüÊèêÁ§∫
      toast({
        title: "Ê∂àÊÅØÂèëÈÄÅÊàêÂäü",
        description: `Â∑≤ÂèëÈÄÅ${files.length > 0 ? `ÂåÖÂê´ ${files.length} ‰∏™Êñá‰ª∂ÁöÑ` : ''}Ê∂àÊÅØ`,
      });

    } catch (error) {
      console.error('ÂèëÈÄÅÊ∂àÊÅØÂ§±Ë¥•:', error);
      toast({
        title: "ÂèëÈÄÅÂ§±Ë¥•",
        description: "ËØ∑ÈáçËØï",
        variant: "destructive",
      });
    }
  };

  // ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπÁöÑËæÖÂä©ÂáΩÊï∞
  const readFileContent = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      
      reader.onload = (e) => {
        const result = e.target?.result;
        if (typeof result === 'string') {
          resolve(result);
        } else {
          reject(new Error('Êó†Ê≥ïËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ'));
        }
      };
      
      reader.onerror = () => {
        reject(new Error('Êñá‰ª∂ËØªÂèñÂ§±Ë¥•'));
      };
      
      // Ê†πÊçÆÊñá‰ª∂Á±ªÂûãÈÄâÊã©ËØªÂèñÊñπÂºè
      if (file.type.includes('text') || file.type.includes('json') || file.type.includes('markdown')) {
        reader.readAsText(file);
      } else {
        // ÂØπ‰∫éPDFÂíåWordÊñáÊ°£ÔºåÊöÇÊó∂ËØªÂèñ‰∏∫ÊñáÊú¨ÔºàÂÆûÈôÖÈ°πÁõÆ‰∏≠ÂèØËÉΩÈúÄË¶Å‰∏ìÈó®ÁöÑËß£ÊûêÂ∫ìÔºâ
        reader.readAsText(file);
      }
    });
  };

  // ËΩ¨Êç¢‰ª£Á†Å‰∏∫ReactÈ¢ÑËßàÊ†ºÂºè
  const getReactPreviewData = () => {
    if (!generatedCode.length) return null

    return {
      files: generatedCode.map(code => ({
        filename: code.filename,
        content: code.content,
        language: code.language,
        type: code.type || 'component',
        description: code.description
      })),
      projectName: currentSession?.id || 'HeysMeÈ°πÁõÆ',
      description: 'Âü∫‰∫éAIÁîüÊàêÁöÑ‰∏™‰∫∫ÁÆÄÂéÜÂíå‰ΩúÂìÅÈõÜ',
      assets: extractAssetsFromCode(generatedCode)
    }
  }

  // ‰ªé‰ª£Á†Å‰∏≠ÊèêÂèñËµÑÊ∫ê
  const extractAssetsFromCode = (codeFiles: any[]) => {
    const assets: any[] = []
    
    codeFiles.forEach(file => {
      // ÊèêÂèñÂõæÁâáÈìæÊé•
      const imageMatches = file.content.match(/src=["']([^"']*\.(jpg|jpeg|png|gif|webp|svg))["']/gi)
      if (imageMatches) {
        imageMatches.forEach((match: string) => {
          const url = match.match(/src=["']([^"']+)["']/)?.[1]
          if (url && url.startsWith('http')) {
            assets.push({
              name: url.split('/').pop() || 'image',
              url,
              type: 'image',
              description: 'È°πÁõÆÂõæÁâáËµÑÊ∫ê'
            })
          }
        })
      }

      // ÊèêÂèñiframeÈìæÊé•
      const iframeMatches = file.content.match(/src=["']([^"']+)["']/gi)
      if (iframeMatches && file.content.includes('iframe')) {
        iframeMatches.forEach((match: string) => {
          const url = match.match(/src=["']([^"']+)["']/)?.[1]
          if (url && url.startsWith('http') && !url.includes('image')) {
            assets.push({
              name: '‰ΩúÂìÅÂ±ïÁ§∫',
              url,
              type: 'link',
              description: '‰ΩúÂìÅÈìæÊé•ÊàñÊºîÁ§∫'
            })
          }
        })
      }
    })

    return assets
  }

  // ÂêØÂä®‰∏ì‰∏öÊ®°ÂºèÊµãËØï - Áõ¥Êé•ËøõÂÖ•‰∏ì‰∏öÊ®°Âºè‰ΩìÈ™å
  const generateTestCode = async () => {
    try {
      console.log('üéØ [‰∏ì‰∏öÊ®°ÂºèÊµãËØï] ÂêØÂä®‰∏ì‰∏öÊ®°Âºè...');
      
      // ËÆæÁΩÆ‰∏∫‰ª£Á†ÅÊ®°Âºè
      setIsCodeMode(true)
      setHasStartedChat(true)
      setGeneratedCode([]) // Ê∏ÖÁ©∫‰πãÂâçÁöÑ‰ª£Á†Å

      // ÂàõÂª∫ÊàñËé∑Âèñ‰ºöËØù
      let session = currentSession
      if (!session) {
        console.log('üéØ [‰∏ì‰∏öÊ®°ÂºèÊµãËØï] ÂàõÂª∫Êñ∞‰ºöËØù...');
        session = await createNewSession()
      }

      console.log('üéØ [‰∏ì‰∏öÊ®°ÂºèÊµãËØï] ‰ºöËØùID:', session?.id);

      // ÊòæÁ§∫‰∏ì‰∏öÊ®°ÂºèÊèêÁ§∫
      const expertModePrompt = `üéØ **‰∏ì‰∏öÊ®°ÂºèÂ∑≤ÂêØÂä®ÔºÅ**

‰∏ì‰∏öÊ®°Âºè‰ΩøÁî®ÊúÄÂÖàËøõÁöÑ‰ª£Á†ÅÁîüÊàêËÉΩÂäõÔºå‰∏∫‰Ω†ÂàõÂª∫V0Á∫ßÂà´ÁöÑÈ´òË¥®ÈáèWebÈ°πÁõÆ„ÄÇ

### üí° ÊîØÊåÅÁöÑÈ°πÁõÆÁ±ªÂûãÔºö
- ‰∏™‰∫∫ÁÆÄÂéÜ/‰ΩúÂìÅÈõÜÁΩëÁ´ô
- ÂïÜ‰∏öÂ±ïÁ§∫È°µÈù¢  
- ÂçöÂÆ¢ÁΩëÁ´ô
- ‰∫ßÂìÅ‰ªãÁªçÈ°µ
- ÂÖ¨Âè∏ÂÆòÁΩë
- ÁôªÈôÜÈ°µÈù¢
- ‰ª™Ë°®ÊùøÁïåÈù¢
- ÂÖ∂‰ªñ‰ªª‰ΩïWebÂ∫îÁî®

### üîß ‰∏ì‰∏öÁâπÊÄßÔºö
- V0 Á∫ßÂà´ÁöÑ‰ª£Á†ÅË¥®Èáè
- Next.js 15 + TypeScript
- Tailwind CSS + shadcn/ui
- ÂìçÂ∫îÂºèËÆæËÆ°ÂíåÊó†ÈöúÁ¢çÊîØÊåÅ
- Áé∞‰ª£ÂåñÂä®ÁîªÊïàÊûú

ËØ∑ÂëäËØâÊàë‰Ω†ÊÉ≥Ë¶ÅÂàõÂª∫‰ªÄ‰πàÁ±ªÂûãÁöÑÈ°πÁõÆÔºÅ

**Á§∫‰æãËæìÂÖ•Ôºö**
- "ÂàõÂª∫‰∏Ä‰∏™‰∏™‰∫∫ÁÆÄÂéÜÁΩëÁ´ô"
- "ÁîüÊàê‰∏Ä‰∏™‰∫ßÂìÅÂ±ïÁ§∫È°µÈù¢" 
- "Âà∂‰Ωú‰∏Ä‰∏™ÂÖ¨Âè∏‰ªãÁªçÁΩëÁ´ô"`

      // ÊâãÂä®Ê∑ªÂä†‰∏Ä‰∏™Á≥ªÁªüÊèêÁ§∫Ê∂àÊÅØÂà∞‰ºöËØùÂéÜÂè≤
      if (session) {
        const expertModeMessage = {
          id: `msg-${Date.now()}-expertmode`,
          timestamp: new Date(),
          type: 'agent_response' as const,
          agent: 'system',
          content: expertModePrompt,
          metadata: {
            expertMode: true,
            awaitingUserInput: true
          }
        }
        
        session.conversationHistory.push(expertModeMessage)
      }

      console.log('üéØ [‰∏ì‰∏öÊ®°ÂºèÊµãËØï] ‰∏ì‰∏öÊ®°ÂºèÂáÜÂ§áÂÆåÊàêÔºåÁ≠âÂæÖÁî®Êà∑ËæìÂÖ•...');

    } catch (error) {
      console.error('‚ùå [‰∏ì‰∏öÊ®°ÂºèÊµãËØï] ÂêØÂä®Â§±Ë¥•:', error)
    }
  }

  // ËøîÂõûÂØπËØùÊ®°Âºè
  const handleBackToChat = () => {
    setIsCodeMode(false)
    setGeneratedCode([])
  }

  // Â§ÑÁêÜ‰æßËæπÊ†èÊäòÂè†ÂàáÊç¢
  const handleToggleSidebar = () => {
    setIsSidebarCollapsed(!isSidebarCollapsed)
  }

  return (
    <div
      className={`h-screen flex transition-all duration-300 ${
        theme === "light" 
          ? "bg-page-gradient-light" 
          : "bg-page-gradient-dark"
      }`}
    >
      {/* üé® Â∑¶‰æß‰æßËæπÊ†è - ÂÖ®È´òÂ∫¶Â∏ÉÂ±Ä */}
      <ChatSidebar 
        sessions={sessions}
        currentSession={currentSession}
        isCodeMode={isCodeMode}
        onNewChat={handleNewChat}
        onSelectSession={selectSession}
        onGenerateExpertMode={generateTestCode}
        isCollapsed={isSidebarCollapsed}
        onToggleCollapse={handleToggleSidebar}
      />

      {/* üé® ‰∏ªÂÜÖÂÆπÂå∫Âüü - ÂåÖÂê´headerÂíåÂÜÖÂÆπ */}
      <div className="flex-1 flex flex-col overflow-hidden">
        {/* üé® È°∂ÈÉ®ÂØºËà™Ê†è - ÂìÅÁâåËâ≤ - Âú®ÊâÄÊúâÊ®°Âºè‰∏ãÊòæÁ§∫ */}
        <ChatHeader 
          chatMode={chatMode}
          onModeChange={setChatMode}
          isCodeMode={isCodeMode}
          onBackToChat={handleBackToChat}
        />

        {/* üé® ‰∏ªÂÜÖÂÆπÂå∫Âüü */}
        <div className="flex-1 flex flex-col overflow-hidden">
          {isCodeMode ? (
            /* ‰ª£Á†ÅÊ®°Âºè */
            <CodeModeView
              currentSession={currentSession}
              generatedCode={generatedCode}
              inputValue={inputValue}
              setInputValue={setInputValue}
              isGenerating={isGenerating}
              onBack={handleBackToChat}
              onSendMessage={handleSendMessage}
              onSendChatMessage={sendMessage}
              onKeyPress={handleKeyPress}
              onDownload={handleCodeDownload}
              onDeploy={handleDeploy}
              onEditCode={handleEditCode}
              getReactPreviewData={getReactPreviewData}
              onFileUpload={handleFileUpload}
            />
          ) : hasStartedChat ? (
            /* Ê≠£Â∏∏ÂØπËØùÊ®°Âºè */
            <ChatModeView
              currentSession={currentSession}
              inputValue={inputValue}
              setInputValue={setInputValue}
              isGenerating={isGenerating}
              onSendMessage={sendMessage}
              onKeyPress={handleKeyPress}
              sessionId={currentSession?.id}
              onFileUpload={handleFileUpload}
            />
          ) : (
            /* Ê¨¢ËøéÂ±èÂπï */
            <WelcomeScreen
              inputValue={inputValue}
              setInputValue={setInputValue}
              onSendMessage={handleSendMessage}
              isGenerating={isGenerating}
              chatMode={chatMode}
              onFileUpload={handleFileUpload}
              onSendWithFiles={handleSendWithFiles}
            />
          )}
        </div>
      </div>

      {/* Êú™ÁôªÂΩïÊèêÈÜíÂØπËØùÊ°Ü */}
      <AuthPromptDialog
        isOpen={showAuthDialog}
        onClose={() => setShowAuthDialog(false)}
        title="ÈúÄË¶ÅÁôªÂΩïÊâçËÉΩÁªßÁª≠"
        message="ËØ∑ÂÖàÁôªÂΩïÊÇ®ÁöÑË¥¶Êà∑Êù•ÁªßÁª≠‰ΩøÁî®"
        action="ÂºÄÂßãÂØπËØù"
        onLoginSuccess={() => {
          // ÁôªÂΩïÊàêÂäüÂõûË∞É‰ºöÂú®useEffect‰∏≠Â§ÑÁêÜ
          setShowAuthDialog(false);
        }}
      />
    </div>
  )
}
